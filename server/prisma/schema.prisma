generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  username       String           @unique
  email          String           @unique
  password       String
  wallet         Wallet?
  transactions   Transaction[]
  customCategories CustomCategory[]
  savingsGoals   SavingsGoal[]
  budgets        Budget[]
  paidExpenses   Expense[]        @relation("PaidBy")
  splitExpenses  Expense[]        @relation("SplitWith")
}


model CustomCategory {
  id           String        @id @default(uuid())
  name         String
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  budgets      Budget[]
}

model SavingsGoal {
  id             String   @id @default(uuid())
  name           String
  targetAmount   Float
  currentAmount  Float    @default(0)
  deadline       DateTime?
  userId         String
  user           User     @relation(fields: [userId], references: [id])
}

model Budget {
  id               String         @id @default(uuid())
  amount           Float
  period           String
  customCategoryId String
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  customCategory   CustomCategory @relation(fields: [customCategoryId], references: [id])
}

model Expense {
  id          String   @id @default(uuid())
  amount      Float
  description String
  date        DateTime @default(now())
  paidById    String
  paidBy      User     @relation("PaidBy", fields: [paidById], references: [id])
  splitWith   User[]   @relation("SplitWith")
}


model Wallet {
  id           String        @id @default(uuid())  // Unique ID for wallet
  userId       String        @unique        // Foreign key for the user who owns the wallet
  balance      Float                           // Balance in the wallet
  user         User          @relation(fields: [userId], references: [id]) // Relates to User model
  transactions Transaction[]                   // One-to-many relationship with transactions
}

model Transaction {
  id        String   @id @default(uuid())   // Unique ID for transaction
  walletId  String                               // Foreign key for the wallet associated with this transaction
  recipientId String?                           // Optional recipient ID (user or wallet recipient)
  type      String                               // Type of transaction (e.g., "send" or "receive")
  amount    Float                                // Amount of money in the transaction
  category  String                               // Category of the transaction (e.g., "food", "salary")
  createdAt DateTime @default(now())             // Automatically sets creation date and time
  wallet    Wallet   @relation(fields: [walletId], references: [id]) // Relates to Wallet model
  recipient User?    @relation(fields: [recipientId], references: [id]) // Relates to User model (optional)
}

